CREATE TABLE Tierheim(
	Name varchar(255) NOT NULL,
	HeimID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	Adresse varchar(255) NOT NULL
);

CREATE TABLE Tierarzt(
	Name varchar(255) NOT NULL,
	Lizenznummer int PRIMARY KEY,
	Spezialisierung varchar(255) DEFAULT 'Allgemein',
	Handynummer varchar(20) CHECK (Handynummer LIKE '+% %')
);

CREATE SEQUENCE kunde_seq START WITH 1 INCREMENT BY 1;

CREATE TABLE Kunde(
	Name varchar(255) NOT NULL,
	PersonalID NUMBER PRIMARY KEY,
	Land varchar(255) NOT NULL,
	Stadt varchar(255) NOT NULL,
	PLZ int,
	Strasse varchar(255) NOT NULL,
	Hausnummer int NOT NULL,
	Handynummer varchar(20) CHECK (Handynummer LIKE '+% %')
);

CREATE
OR REPLACE TRIGGER kunde_trigger BEFORE
INSERT
	ON Kunde FOR EACH ROW BEGIN
SELECT
	kunde_seq.NEXTVAL INTO :NEW.PersonalID
FROM
	dual;

END;
/

 CREATE TABLE Profil(
	Name varchar(30) NOT NULL,
	PersonalID int,
	Handynummer varchar(20) UNIQUE CHECK (Handynummer LIKE '+% %'),
	EMail varchar(255),
	Bild BLOB DEFAULT NULL,
	PRIMARY KEY(PersonalID, EMail),
	FOREIGN KEY (PersonalID) references Kunde(PersonalID) ON DELETE CASCADE
);

CREATE TABLE StrassenTier(
	TierID int PRIMARY KEY,
	Name varchar(100) NOT NULL,
	Impfung varchar(255) DEFAULT 'Tollwut',
	PersonalID int,
	Bild BLOB default null,
	AbholDatum date,
	Tier_Alter int,
	FOREIGN KEY (PersonalID) references Kunde(PersonalID) ON DELETE CASCADE
);

CREATE TABLE Hund(
	TierID int Primary Key,
	HundIndex int UNIQUE,
	Gewicht int,
	FOREIGN KEY (TierID) references StrassenTier(TierID) ON DELETE CASCADE
);

CREATE TABLE Katze(
	TierID int Primary Key,
	KatzenIndex int UNIQUE,
	Hauskatze varchar(40) DEFAULT 'Hauskatze',
	FOREIGN KEY (TierID) references StrassenTier(TierID) ON DELETE CASCADE
);

CREATE TABLE Behandlung(
	TierID int,
	Lizenznummer int,
	HeimID int NOT NULL,
	PRIMARY KEY(Lizenznummer, TierID),
	FOREIGN KEY (Lizenznummer) references Tierarzt(Lizenznummer) ON DELETE
	SET
		NULL,
		FOREIGN KEY (HeimID) references Tierheim(HeimID) ON DELETE
	SET
		NULL,
		FOREIGN KEY (TierID) references StrassenTier ON DELETE CASCADE
);

create or replace NONEDITIONABLE TRIGGER set_specialization
BEFORE INSERT ON TierArzt
FOR EACH ROW
BEGIN

  :NEW.Spezialisierung := 'Allgemein und Chirurg'; 
END;
/

CREATE TABLE Kollegen(
	Lizenznummer1 int,
	Lizenznummer2 int,
	PRIMARY KEY (Lizenznummer1, Lizenznummer2),
	FOREIGN KEY (Lizenznummer1) references Tierarzt(Lizenznummer),
	FOREIGN KEY (Lizenznummer2) references Tierarzt(Lizenznummer)
);

CREATE view KundeProfil AS
SELECT
	kunde.name AS KUNDENNAME,
	profil.name as PROFILNAME,
	profil.email as EMAIL,
	profil.handynummer as HANDYNUMMER,
	profil.personalid as PERSONALID,
	profil.bild as BILD,
	kunde.land as LAND,
	kunde.plz as PLZ,
	kunde.stadt as STADT,
	kunde.strasse as STRASSE,
	kunde.hausnummer as HAUSNUMMER
FROM
	Kunde
	INNER JOIN Profil ON kunde.personalid = profil.personalid;

Create View Dogs as
SELECT
	*
FROM
	STRASSENTIER NATURAL
	JOIN HUND;

Create View Cats as
SELECT
	*
FROM
	STRASSENTIER NATURAL
	JOIN KATZE;

create
or replace NONEDITIONABLE PROCEDURE GetTierarztByTierID(
	myId IN NUMBER,
	TierarztName OUT VARCHAR,
	TiararztHandynummber OUT VARCHAR
) IS BEGIN
SELECT
	tierarzt.name,
	tierarzt.handynummer INTO TierarztName,
	TiararztHandynummber
FROM
	behandlung
	INNER JOIN tierarzt ON behandlung.lizenznummer = tierarzt.lizenznummer
WHERE
	behandlung.tierid = myId;

END;
/

CREATE VIEW TierheimView AS
SELECT TH.HeimID, TH.Name AS TierheimName, TH.Adresse, COUNT(ST.TierID) AS AnzahlTiere, AVG(ST.TIER_Alter) AS Durchschnittsaltercht
FROM Tierheim TH
LEFT JOIN StrassenTier ST ON TH.HeimID = ST.TierID
GROUP BY TH.HeimID, TH.Name, TH.Adresse
HAVING COUNT(ST.TierID) > 0;

CREATE OR REPLACE TRIGGER set_specialization
BEFORE INSERT ON TierArzt
FOR EACH ROW
BEGIN
 
  :NEW.Spezialisierung := 'Allgemein und Chirurg'; 
END;
/
